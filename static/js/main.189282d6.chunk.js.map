{"version":3,"sources":["components/submit/Submit.js","components/Username/Username.js","components/Password/Password.js","components/Email/Email.js","components/Age/Age.js","components/RegisterPage/RegPage.js","App.js","serviceWorker.js","index.js"],"names":["Submit","alertme","event","target","value","length","alert","className","onClick","this","Component","Username","state","username","color","userCheck","setState","style","backgroundColor","onChange","placeholder","type","Password","PasswordCheck","Email","email","emailCheck","indexOf","Age","RegPage","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAKqBA,E,2MAEjBC,QAAU,SAACC,GACJA,EAAMC,OAAOC,MAAMC,OAAS,GAC3BC,MAAM,qB,wEAMV,OACI,6BACI,4BAAQC,UAAU,SAASC,QAASC,KAAKR,SAAzC,e,GAZoBS,aCFfC,E,2MAEjBC,MAAQ,CACJC,SAAS,GACTC,MAAO,I,EAGXC,UAAY,SAACb,GACT,EAAKc,SAAS,CAACH,SAAUX,EAAMC,OAAOC,QAEnCF,EAAMC,OAAOC,MAAMC,OAAS,GAAKH,EAAMC,OAAOC,MAAMC,OAAS,GAC5D,EAAKW,SAAS,CAACF,MAAO,UAEO,IAA9BZ,EAAMC,OAAOC,MAAMC,OAClB,EAAKW,SAAS,CAACF,MAAO,KAEtB,EAAKE,SAAS,CAACF,MAAO,S,wEAM1B,OACI,6BACI,uBAAGP,UAAU,SAAb,8BACA,2BAAOA,UAAU,QAAQU,MAAO,CAACC,gBAAiBT,KAAKG,MAAME,OAAQK,SAAUV,KAAKM,UAAWK,YAAY,sBAAsBC,KAAK,c,GAzBhHX,aCAjBY,E,2MAEjBV,MAAQ,CACJE,MAAO,GACPQ,SAAU,I,EAEdC,cAAgB,SAACrB,GACb,EAAKc,SAAS,CAACM,SAAUpB,EAAMC,OAAOC,QAEnCF,EAAMC,OAAOC,MAAMC,OAAS,GAC3B,EAAKW,SAAS,CAACF,MAAO,QAEO,IAA9BZ,EAAMC,OAAOC,MAAMC,OAClB,EAAKW,SAAS,CAACF,MAAO,KAEtB,EAAKE,SAAS,CAACF,MAAO,W,wEAM1B,OACI,6BACI,uBAAGP,UAAU,SAAb,iCACA,2BAAOA,UAAU,QAAQU,MAAO,CAACC,gBAAiBT,KAAKG,MAAME,OAAQK,SAAUV,KAAKc,cAAeH,YAAY,yBAAyBC,KAAK,c,GAxBvHX,aCAjBc,E,2MAEjBZ,MAAQ,CACJE,MAAO,GACPW,MAAO,I,EAEXC,WAAa,SAACxB,GACV,EAAKc,SAAS,CAACS,MAAOvB,EAAMC,OAAOC,QAEI,IAApCF,EAAMC,OAAOC,MAAMuB,QAAQ,KAC1B,EAAKX,SAAS,CAACF,MAAO,UAEtB,EAAKE,SAAS,CAACF,MAAO,M,wEAM1B,OACI,6BACI,uBAAGP,UAAU,SAAb,iCACA,2BAAOA,UAAU,QAAQU,MAAO,CAACC,gBAAiBT,KAAKG,MAAME,OAAQK,SAAUV,KAAKiB,WAAYN,YAAY,8BAA8BC,KAAK,c,GArB5HX,aCAdkB,E,iLAEb,OACI,6BACI,uBAAGrB,UAAU,SAAb,OACA,2BAAOA,UAAU,QAAQa,YAAY,oBAAoBC,KAAK,c,GAL7CX,aCOZmB,E,iLAMb,OACI,yBAAKtB,UAAU,YACX,wBAAIU,MAAO,CAACa,UAAW,WAAvB,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAbqBpB,aCGtBqB,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCIcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.189282d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\n\r\n\r\nexport default class Submit extends Component {\r\n    \r\n    alertme = (event) => {\r\n        if(event.target.value.length < 2) {\r\n            alert('register success');\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className=\"button\" onClick={this.alertme}>submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../../App.css';\r\n\r\nexport default class Username extends Component {\r\n    \r\n    state = {\r\n        username:'',\r\n        color: ''\r\n    }\r\n\r\n    userCheck = (event) => {\r\n        this.setState({username: event.target.value});\r\n\r\n        if(event.target.value.length > 5 && event.target.value.length < 9){\r\n            this.setState({color: 'green'});\r\n        }\r\n        if(event.target.value.length === 0) {\r\n            this.setState({color: ''});\r\n        }else{\r\n            this.setState({color: 'red'});\r\n        }\r\n        \r\n    }\r\n      \r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className=\"title\">Username (use 6-8 letters)</p>\r\n                <input className=\"input\" style={{backgroundColor: this.state.color}} onChange={this.userCheck} placeholder=\"Enter a username...\" type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../../App.css';\r\n\r\nexport default class Password extends Component {\r\n    \r\n    state = {\r\n        color: '',\r\n        Password: ''\r\n    }\r\n    PasswordCheck = (event) => {\r\n        this.setState({Password: event.target.value});\r\n\r\n        if(event.target.value.length > 7) {\r\n            this.setState({color: 'red'});\r\n        }\r\n        if(event.target.value.length === 0) {\r\n            this.setState({color: ''});\r\n        }else{\r\n            this.setState({color: 'green'});\r\n        }\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className=\"title\">Password (up to 7 characters)</p>\r\n                <input className=\"input\" style={{backgroundColor: this.state.color}} onChange={this.PasswordCheck} placeholder=\"Enter your password...\" type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../../App.css';\r\n\r\nexport default class Email extends Component {\r\n    \r\n    state = {\r\n        color: '',\r\n        email: ''\r\n    }\r\n    emailCheck = (event) => {\r\n        this.setState({email: event.target.value});\r\n\r\n        if(event.target.value.indexOf('@') === 3) {\r\n            this.setState({color: 'green'});\r\n        }else{\r\n            this.setState({color: ''});\r\n        }\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className=\"title\">Email (@ in the fourth place)</p>\r\n                <input className=\"input\" style={{backgroundColor: this.state.color}} onChange={this.emailCheck} placeholder=\"Enter your email address...\" type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../../App.css';\r\n\r\nexport default class Age extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className=\"title\">Age</p>\r\n                <input className=\"input\" placeholder=\"Enter your age...\" type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Submit from '../submit/Submit.js';\r\nimport Username from '../Username/Username.js';\r\nimport Password from '../Password/Password.js';\r\nimport Email from '../Email/Email.js';\r\nimport Age from '../Age/Age.js';\r\nimport '../../App.css';\r\n\r\n\r\n\r\nexport default class RegPage extends Component {\r\n    \r\n\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"reg-page\">\r\n                <h1 style={{textAlign: \"center\"}}>Register page</h1>\r\n                <Username/>\r\n                <Password/>\r\n                <Email/>\r\n                <Age/>\r\n                <Submit/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport RegPage from './components/RegisterPage/RegPage.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RegPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}